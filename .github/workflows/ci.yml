name: CI Pipeline

on:
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: npm # npm 캐시 사용

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Close PR, if build fails # 빌드 실패시 pr 닫기
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.TOKEN }}
          # octokit 문법 참고
          script: |
            const pull_number = context.payload.pull_request.number
            const updated_title = `[BUILD FAIL] ${{ github.event.pull_request.title }}`
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              body: '빌드에 실패했습니다.',
              event: 'REQUEST_CHANGES'
            })
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              title: updated_title,
              state: 'closed'
            })

      - name: Approve PR, If build test passes # 빌드 통과시, PR 머지
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.TOKEN }}
          script: |
            const pull_number = context.payload.pull_request.number
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              body: '빌드 테스트에 통과했습니다',
              state: 'open',
              title: context.payload.pull_request.title.replace('[BUILD FAIL] ', '')
            })
      - name: Approve PR, If build test passes # 빌드 통과시, PR 승인
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_number = context.payload.pull_request.number
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              body: '빌드 테스트에 통과했습니다',
              event: 'APPROVE'
            })
